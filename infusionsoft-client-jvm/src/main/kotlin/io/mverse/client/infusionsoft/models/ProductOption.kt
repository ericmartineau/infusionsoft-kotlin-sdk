/**
* Infusionsoft REST API
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: 1.70.0.72014
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.mverse.client.infusionsoft.models

import io.mverse.client.infusionsoft.models.ProductOptionValue

import kotlinx.serialization.Optional
import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName


import io.mverse.client.infusionsoft.infrastructure.EnumStringSerializer
/**
 * 
 * @param allow_spaces 
 * @param can_contain_character 
 * @param can_contain_number 
 * @param can_end_with_character 
 * @param can_end_with_number 
 * @param can_start_with_character 
 * @param can_start_with_number 
 * @param display_index 
 * @param id 
 * @param label 
 * @param max_chars 
 * @param min_chars 
 * @param name 
 * @param required 
 * @param text_message 
 * @param type 
 * @param values 
 */
@Serializable
data class ProductOption (
    @SerialName("allow_spaces") @Optional val allowSpaces: Boolean? = null,
    @SerialName("can_contain_character") @Optional val canContainCharacter: Boolean? = null,
    @SerialName("can_contain_number") @Optional val canContainNumber: Boolean? = null,
    @SerialName("can_end_with_character") @Optional val canEndWithCharacter: Boolean? = null,
    @SerialName("can_end_with_number") @Optional val canEndWithNumber: Boolean? = null,
    @SerialName("can_start_with_character") @Optional val canStartWithCharacter: Boolean? = null,
    @SerialName("can_start_with_number") @Optional val canStartWithNumber: Boolean? = null,
    @SerialName("display_index") @Optional val displayIndex: Int? = null,
    @SerialName("id") @Optional val id: Long? = null,
    @SerialName("label") @Optional val label: String? = null,
    @SerialName("max_chars") @Optional val maxChars: Int? = null,
    @SerialName("min_chars") @Optional val minChars: Int? = null,
    @SerialName("name") @Optional val name: String? = null,
    @SerialName("required") @Optional val required: Boolean? = null,
    @SerialName("text_message") @Optional val textMessage: String? = null,
    @SerialName("type") @Optional val type: ProductOption.Type? = null,
    @SerialName("values") @Optional val values: List<ProductOptionValue>? = null
) {

    /**
    * 
    * Values: FIXEDLIST,VARIABLE
    */
    @Serializable(with = Type.Serializer::class)
    enum class Type(val value: String){
    
        FIXEDLIST("FixedList"),
    
        VARIABLE("Variable");
    

      class Serializer: EnumStringSerializer<Type>(Type::class)

      override fun toString(): String = value.toString()
    }

}

