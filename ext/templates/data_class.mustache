import kotlinx.serialization.Optional
import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName


{{#hasEnums}}
import {{packageName}}.infrastructure.EnumStringSerializer
{{/hasEnums}}
/**
 * {{{description}}}
{{#vars}}
 * @param {{name}} {{{description}}}
{{/vars}}
 */
@Serializable
data class {{classname}} (
{{#requiredVars}}
{{>data_class_req_var}}{{^-last}},
{{/-last}}{{/requiredVars}}{{#hasRequired}}{{#hasOptional}},
{{/hasOptional}}{{/hasRequired}}{{#optionalVars}}{{>data_class_opt_var}}{{^-last}},
{{/-last}}{{/optionalVars}}
) {
{{#hasEnums}}{{#vars}}{{#isEnum}}
    /**
    * {{{description}}}
    * Values: {{#allowableValues}}{{#enumVars}}{{&name}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}
    */
    @Serializable(with = {{nameInCamelCase}}.Serializer::class)
    enum class {{nameInCamelCase}}(val value: {{datatype}}){
    {{#allowableValues}}{{#enumVars}}
        {{&name}}({{{value}}}){{^-last}},{{/-last}}{{#-last}};{{/-last}}
    {{/enumVars}}{{/allowableValues}}

      class Serializer: EnumStringSerializer<{{nameInCamelCase}}>({{nameInCamelCase}}::class)

      override fun toString(): String = value.toString()
    }
{{/isEnum}}{{/vars}}{{/hasEnums}}
}
