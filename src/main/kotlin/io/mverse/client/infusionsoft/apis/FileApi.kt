/**
* Infusionsoft REST API
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: 1.70.0.72014
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.mverse.client.infusionsoft.apis

import io.mverse.client.infusionsoft.models.Error
import io.mverse.client.infusionsoft.models.FileInformation
import io.mverse.client.infusionsoft.models.FileList
import io.mverse.client.infusionsoft.models.FileUpload

import io.mverse.client.infusionsoft.infrastructure.*

class FileApi(bearerToken:String, basePath: kotlin.String = "https://api.infusionsoft.com/crm/rest/v1") : ApiClient(basePath, bearerToken) {

    /**
    * Upload File
    * Upload a base64 encoded file. &#x60;contact_id&#x60; is required only when &#x60;file_association&#x60; is &#x60;CONTACT&#x60;.
    * @param fileUpload fileUpload (optional)
    * @return FileInformation
    */
    @Suppress("UNCHECKED_CAST")
    fun createFile(fileUpload: FileUpload? = null) : FileInformation {
        val localVariableBody: Any? = fileUpload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        
        val contentHeaders: Map<String, String> = mapOf()
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/files",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<FileInformation>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileInformation
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Delete File
    * Deletes the specified file
    * @param fileId fileId 
    * @return void
    */
    fun deleteFile(fileId: Long) : Unit {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        
        val contentHeaders: Map<String, String> = mapOf()
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)

        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/files/{fileId}".replace("{"+"fileId"+"}", "$fileId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Retrieve File
    * Retrieves metadata about a specific file. Optionally returns the base64 encoded file data.
    * @param fileId fileId 
    * @param optionalProperties Comma-delimited list of File properties to include in the response. (Some fields such as &#x60;file_data&#x60; aren&#39;t included, by default.) (optional)
    * @return FileInformation
    */
    @Suppress("UNCHECKED_CAST")
    fun getFile(fileId: Long, optionalProperties: List<String>? = null) : FileInformation {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        if (optionalProperties != null) localVariableQuery["optional_properties"] to toMultiValue(optionalProperties!!.toList(), "multi")

        val contentHeaders: Map<String, String> = mapOf()
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/files/{fileId}".replace("{"+"fileId"+"}", "$fileId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<FileInformation>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileInformation
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * List Files
    * Retrieves a list of all files
    * @param limit Sets a total of items to return (optional)
    * @param offset Sets a beginning range of items to return (optional)
    * @param viewable Include public or private files in response (PUBLIC or PRIVATE), defaults to BOTH. (optional)
    * @param permission Filter based on the permission of files (USER or COMPANY), defaults to BOTH. (optional)
    * @param type Filter based on the type of file. (optional)
    * @param name Filter files based on name, with &#39;*&#39; preceding or following to indicate LIKE queries. (optional)
    * @param contactId Filter based on Contact Id, if user has permission to see Contact files. (optional)
    * @return FileList
    */
    @Suppress("UNCHECKED_CAST")
    fun listFiles(limit: Int? = null, offset: Int? = null, viewable: String? = null, permission: String? = null, type: String? = null, name: String? = null, contactId: Long? = null) : FileList {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        if (limit != null) localVariableQuery["limit"] to listOf("$limit")
if (offset != null) localVariableQuery["offset"] to listOf("$offset")
if (viewable != null) localVariableQuery["viewable"] to listOf("$viewable")
if (permission != null) localVariableQuery["permission"] to listOf("$permission")
if (type != null) localVariableQuery["type"] to listOf("$type")
if (name != null) localVariableQuery["name"] to listOf("$name")
if (contactId != null) localVariableQuery["contact_id"] to listOf("$contactId")

        val contentHeaders: Map<String, String> = mapOf()
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/files",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<FileList>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileList
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Replace File
    * Upload a base64 encoded file to replace an existing one. &#x60;contact_id&#x60; is required only when &#x60;file_association&#x60; is &#x60;CONTACT&#x60;.
    * @param fileId fileId 
    * @param fileUpload fileUpload (optional)
    * @return FileInformation
    */
    @Suppress("UNCHECKED_CAST")
    fun updateFile(fileId: Long, fileUpload: FileUpload? = null) : FileInformation {
        val localVariableBody: Any? = fileUpload
        val localVariableQuery: MultiValueMap = mutableMapOf()
        
        val contentHeaders: Map<String, String> = mapOf()
        val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)

        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/files/{fileId}".replace("{"+"fileId"+"}", "$fileId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<FileInformation>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileInformation
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
