/**
* Infusionsoft REST API
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: 1.70.0.78606
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.mverse.client.infusionsoft.apis

import io.mverse.client.infusionsoft.models.AchieveApiGoalEvent
import io.mverse.client.infusionsoft.models.Campaign
import io.mverse.client.infusionsoft.models.CampaignList
import io.mverse.client.infusionsoft.models.Error
import io.mverse.client.infusionsoft.models.GoalEventResultDTO
import io.mverse.client.infusionsoft.models.SetOfIds

import io.mverse.client.infusionsoft.infrastructure.*
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken

    interface CampaignApi {

        /**
        *  Add to Campaign Sequence
        *  Adds a single contact to a campaign sequence
        *  * @param campaignId campaignId 
        *  * @param sequenceId sequenceId 
        *  * @param contactId contactId 
        *  * @return void
        */
        fun addContactToCampaignSequence(campaignId: Long, sequenceId: Long, contactId: Long) : Unit
        /**
        *  Add Multiple to Campaign Sequence
        *  Adds a list of contacts to a campaign sequence
        *  * @param campaignId campaignId 
        *  * @param sequenceId sequenceId 
        *  * @param ids ids 
        *  * @return Map<kotlin.String, String>
        */
        fun addContactsToCampaignSequence(campaignId: Long, sequenceId: Long, ids: SetOfIds) : Map<kotlin.String, String>
        /**
        *  Achieve API Goal
        *  Achieves API goal for campaigns with matching integration, callName for a given contactId
        *  * @param integration integration 
        *  * @param callName callName 
        *  * @param goalEvent goalEvent 
        *  * @return List<GoalEventResultDTO>
        */
        fun createAchieveApiGoalEvent(integration: String, callName: String, goalEvent: AchieveApiGoalEvent) : List<GoalEventResultDTO>
        /**
        *  Retrieve a Campaign
        *  Retrieves a single campaign
        *  * @param campaignId campaignId 
        *  * @param optionalProperties Comma-delimited list of Campaign properties to include in the response. (The fields &#x60;goals&#x60; and &#x60;sequences&#x60; aren&#39;t included, by default.) (optional)
        *  * @return Campaign
        */
        fun getCampaign(campaignId: Long, optionalProperties: List<String>? = null) : Campaign
        /**
        *  List Campaigns
        *  Retrieves all campaigns for the authenticated user
        *  * @param limit Sets a total of items to return (optional)
        *  * @param offset Sets a beginning range of items to return (optional)
        *  * @param searchText Optional text to search (optional)
        *  * @param order Attribute to order items by (optional)
        *  * @param orderDirection How to order the data i.e. ascending (A-Z) or descending (Z-A) (optional)
        *  * @return CampaignList
        */
        fun listCampaigns(limit: Int? = null, offset: Int? = null, searchText: String? = null, order: String? = null, orderDirection: String? = null) : CampaignList
        /**
        *  Remove from Campaign Sequence
        *  Removes a single contact from a campaign sequence
        *  * @param campaignId campaignId 
        *  * @param sequenceId sequenceId 
        *  * @param contactId contactId 
        *  * @return void
        */
        fun removeContactFromCampaignSequence(campaignId: Long, sequenceId: Long, contactId: Long) : Unit
        /**
        *  Remove Multiple from Campaign Sequence
        *  Removes a list of contacts from a campaign sequence
        *  * @param campaignId campaignId 
        *  * @param sequenceId sequenceId 
        *  * @param ids ids 
        *  * @return void
        */
        fun removeContactsFromCampaignSequence(campaignId: Long, sequenceId: Long, ids: SetOfIds) : Unit
    }

class CampaignApiImpl(bearerToken:String, basePath: String, gson: Gson) : CampaignApi, ApiClient(basePath, bearerToken, gson) {

  /**
   *  Add to Campaign Sequence
   *  Adds a single contact to a campaign sequence
   *  * @param campaignId campaignId 
   *  * @param sequenceId sequenceId 
   *  * @param contactId contactId 
   *  * @return void
   */ 
  override fun addContactToCampaignSequence(campaignId: Long, sequenceId: Long, contactId: Long) : Unit {
    val requestBody = null
    val localVariableQuery: MultiValueMap = mutableMapOf()

    val contentHeaders: Map<String, String> = mapOf()
    val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders.putAll(contentHeaders)
    localVariableHeaders.putAll(acceptsHeaders)

    val localVariableConfig = RequestConfig(
       RequestMethod.POST,
       "/campaigns/{campaignId}/sequences/{sequenceId}/contacts/{contactId}".replace("{"+"campaignId"+"}", "$campaignId").replace("{"+"sequenceId"+"}", "$sequenceId").replace("{"+"contactId"+"}", "$contactId"),
       query = localVariableQuery,
       headers = localVariableHeaders
    )
    val response = request(localVariableConfig, requestBody)

    return when (response) {
      is Success -> gson.fromJson(response.data, object : TypeToken<Unit>() {}.type)
      is Informational -> TODO()
      is Redirection -> TODO()
      is ClientError -> throw ClientException(response.body as? String ?: "Client error")
      is ServerError -> throw ServerException(response.message ?: "Server error")
      else -> throw IllegalStateException("Undefined ResponseType.")
    }
  }
  /**
   *  Add Multiple to Campaign Sequence
   *  Adds a list of contacts to a campaign sequence
   *  * @param campaignId campaignId 
   *  * @param sequenceId sequenceId 
   *  * @param ids ids 
   *  * @return Map<kotlin.String, String>
   */ 
  @Suppress("UNCHECKED_CAST")
  override fun addContactsToCampaignSequence(campaignId: Long, sequenceId: Long, ids: SetOfIds) : Map<kotlin.String, String> {
    val requestBody = ids
    val localVariableQuery: MultiValueMap = mutableMapOf()

    val contentHeaders: Map<String, String> = mapOf()
    val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders.putAll(contentHeaders)
    localVariableHeaders.putAll(acceptsHeaders)

    val localVariableConfig = RequestConfig(
       RequestMethod.POST,
       "/campaigns/{campaignId}/sequences/{sequenceId}/contacts".replace("{"+"campaignId"+"}", "$campaignId").replace("{"+"sequenceId"+"}", "$sequenceId"),
       query = localVariableQuery,
       headers = localVariableHeaders
    )
    val response = request(localVariableConfig, requestBody)

    return when (response) {
      is Success -> gson.fromJson(response.data, object : TypeToken<Map<kotlin.String, String>>() {}.type)
      is Informational -> TODO()
      is Redirection -> TODO()
      is ClientError -> throw ClientException(response.body as? String ?: "Client error")
      is ServerError -> throw ServerException(response.message ?: "Server error")
      else -> throw IllegalStateException("Undefined ResponseType.")
    }
  }
  /**
   *  Achieve API Goal
   *  Achieves API goal for campaigns with matching integration, callName for a given contactId
   *  * @param integration integration 
   *  * @param callName callName 
   *  * @param goalEvent goalEvent 
   *  * @return List<GoalEventResultDTO>
   */ 
  @Suppress("UNCHECKED_CAST")
  override fun createAchieveApiGoalEvent(integration: String, callName: String, goalEvent: AchieveApiGoalEvent) : List<GoalEventResultDTO> {
    val requestBody = goalEvent
    val localVariableQuery: MultiValueMap = mutableMapOf()

    val contentHeaders: Map<String, String> = mapOf()
    val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders.putAll(contentHeaders)
    localVariableHeaders.putAll(acceptsHeaders)

    val localVariableConfig = RequestConfig(
       RequestMethod.POST,
       "/campaigns/goals/{integration}/{callName}".replace("{"+"integration"+"}", "$integration").replace("{"+"callName"+"}", "$callName"),
       query = localVariableQuery,
       headers = localVariableHeaders
    )
    val response = request(localVariableConfig, requestBody)

    return when (response) {
      is Success -> gson.fromJson(response.data, object : TypeToken<List<GoalEventResultDTO>>() {}.type)
      is Informational -> TODO()
      is Redirection -> TODO()
      is ClientError -> throw ClientException(response.body as? String ?: "Client error")
      is ServerError -> throw ServerException(response.message ?: "Server error")
      else -> throw IllegalStateException("Undefined ResponseType.")
    }
  }
  /**
   *  Retrieve a Campaign
   *  Retrieves a single campaign
   *  * @param campaignId campaignId 
   *  * @param optionalProperties Comma-delimited list of Campaign properties to include in the response. (The fields &#x60;goals&#x60; and &#x60;sequences&#x60; aren&#39;t included, by default.) (optional)
   *  * @return Campaign
   */ 
  @Suppress("UNCHECKED_CAST")
  override fun getCampaign(campaignId: Long, optionalProperties: List<String>?) : Campaign {
    val requestBody = null
    val localVariableQuery: MultiValueMap = mutableMapOf()
    if (optionalProperties != null) localVariableQuery["optional_properties"] = toMultiValue(optionalProperties!!.toList(), "multi")

    val contentHeaders: Map<String, String> = mapOf()
    val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders.putAll(contentHeaders)
    localVariableHeaders.putAll(acceptsHeaders)

    val localVariableConfig = RequestConfig(
       RequestMethod.GET,
       "/campaigns/{campaignId}".replace("{"+"campaignId"+"}", "$campaignId"),
       query = localVariableQuery,
       headers = localVariableHeaders
    )
    val response = request(localVariableConfig, requestBody)

    return when (response) {
      is Success -> gson.fromJson(response.data, object : TypeToken<Campaign>() {}.type)
      is Informational -> TODO()
      is Redirection -> TODO()
      is ClientError -> throw ClientException(response.body as? String ?: "Client error")
      is ServerError -> throw ServerException(response.message ?: "Server error")
      else -> throw IllegalStateException("Undefined ResponseType.")
    }
  }
  /**
   *  List Campaigns
   *  Retrieves all campaigns for the authenticated user
   *  * @param limit Sets a total of items to return (optional)
   *  * @param offset Sets a beginning range of items to return (optional)
   *  * @param searchText Optional text to search (optional)
   *  * @param order Attribute to order items by (optional)
   *  * @param orderDirection How to order the data i.e. ascending (A-Z) or descending (Z-A) (optional)
   *  * @return CampaignList
   */ 
  @Suppress("UNCHECKED_CAST")
  override fun listCampaigns(limit: Int?, offset: Int?, searchText: String?, order: String?, orderDirection: String?) : CampaignList {
    val requestBody = null
    val localVariableQuery: MultiValueMap = mutableMapOf()
    if (limit != null) localVariableQuery["limit"] = listOf("$limit")
    if (offset != null) localVariableQuery["offset"] = listOf("$offset")
    if (searchText != null) localVariableQuery["search_text"] = listOf("$searchText")
    if (order != null) localVariableQuery["order"] = listOf("$order")
    if (orderDirection != null) localVariableQuery["order_direction"] = listOf("$orderDirection")

    val contentHeaders: Map<String, String> = mapOf()
    val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders.putAll(contentHeaders)
    localVariableHeaders.putAll(acceptsHeaders)

    val localVariableConfig = RequestConfig(
       RequestMethod.GET,
       "/campaigns",
       query = localVariableQuery,
       headers = localVariableHeaders
    )
    val response = request(localVariableConfig, requestBody)

    return when (response) {
      is Success -> gson.fromJson(response.data, object : TypeToken<CampaignList>() {}.type)
      is Informational -> TODO()
      is Redirection -> TODO()
      is ClientError -> throw ClientException(response.body as? String ?: "Client error")
      is ServerError -> throw ServerException(response.message ?: "Server error")
      else -> throw IllegalStateException("Undefined ResponseType.")
    }
  }
  /**
   *  Remove from Campaign Sequence
   *  Removes a single contact from a campaign sequence
   *  * @param campaignId campaignId 
   *  * @param sequenceId sequenceId 
   *  * @param contactId contactId 
   *  * @return void
   */ 
  override fun removeContactFromCampaignSequence(campaignId: Long, sequenceId: Long, contactId: Long) : Unit {
    val requestBody = null
    val localVariableQuery: MultiValueMap = mutableMapOf()

    val contentHeaders: Map<String, String> = mapOf()
    val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders.putAll(contentHeaders)
    localVariableHeaders.putAll(acceptsHeaders)

    val localVariableConfig = RequestConfig(
       RequestMethod.DELETE,
       "/campaigns/{campaignId}/sequences/{sequenceId}/contacts/{contactId}".replace("{"+"campaignId"+"}", "$campaignId").replace("{"+"sequenceId"+"}", "$sequenceId").replace("{"+"contactId"+"}", "$contactId"),
       query = localVariableQuery,
       headers = localVariableHeaders
    )
    val response = request(localVariableConfig, requestBody)

    return when (response) {
      is Success -> gson.fromJson(response.data, object : TypeToken<Unit>() {}.type)
      is Informational -> TODO()
      is Redirection -> TODO()
      is ClientError -> throw ClientException(response.body as? String ?: "Client error")
      is ServerError -> throw ServerException(response.message ?: "Server error")
      else -> throw IllegalStateException("Undefined ResponseType.")
    }
  }
  /**
   *  Remove Multiple from Campaign Sequence
   *  Removes a list of contacts from a campaign sequence
   *  * @param campaignId campaignId 
   *  * @param sequenceId sequenceId 
   *  * @param ids ids 
   *  * @return void
   */ 
  override fun removeContactsFromCampaignSequence(campaignId: Long, sequenceId: Long, ids: SetOfIds) : Unit {
    val requestBody = ids
    val localVariableQuery: MultiValueMap = mutableMapOf()

    val contentHeaders: Map<String, String> = mapOf()
    val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
    val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
    localVariableHeaders.putAll(contentHeaders)
    localVariableHeaders.putAll(acceptsHeaders)

    val localVariableConfig = RequestConfig(
       RequestMethod.DELETE,
       "/campaigns/{campaignId}/sequences/{sequenceId}/contacts".replace("{"+"campaignId"+"}", "$campaignId").replace("{"+"sequenceId"+"}", "$sequenceId"),
       query = localVariableQuery,
       headers = localVariableHeaders
    )
    val response = request(localVariableConfig, requestBody)

    return when (response) {
      is Success -> gson.fromJson(response.data, object : TypeToken<Unit>() {}.type)
      is Informational -> TODO()
      is Redirection -> TODO()
      is ClientError -> throw ClientException(response.body as? String ?: "Client error")
      is ServerError -> throw ServerException(response.message ?: "Server error")
      else -> throw IllegalStateException("Undefined ResponseType.")
    }
  }
}

