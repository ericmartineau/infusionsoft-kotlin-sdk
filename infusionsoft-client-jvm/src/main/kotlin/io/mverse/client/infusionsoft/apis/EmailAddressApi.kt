/**
* Infusionsoft REST API
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: 1.70.0.72014
*
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.mverse.client.infusionsoft.apis

import io.mverse.client.infusionsoft.models.RestEmailAddress
import io.mverse.client.infusionsoft.models.UpdateEmailAddress

import io.mverse.client.infusionsoft.infrastructure.*

class EmailAddressApi(bearerToken:String, basePath: kotlin.String = "https://api.infusionsoft.com/crm/rest/v1") : ApiClient(basePath, bearerToken) {

    /**
    * Replace an Email Address
    * Replaces all of the values of a given email address
    * @param email email
    * @param update update
    * @return RestEmailAddress
    */
    @Suppress("UNCHECKED_CAST")
    fun replaceEmailAddress(email: String, update: UpdateEmailAddress) : RestEmailAddress {
       val localVariableBody: Any? = update
       val localVariableQuery: MultiValueMap = mutableMapOf()

       val contentHeaders: Map<String, String> = mapOf()
       val acceptsHeaders: Map<String, String> = mapOf("Accept" to "application/json")
       val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
       localVariableHeaders.putAll(contentHeaders)
       localVariableHeaders.putAll(acceptsHeaders)

       val localVariableConfig = RequestConfig(
           RequestMethod.PUT,
           "/emailAddresses/{email}".replace("{" + "email" + "}", "$email"),
           query = localVariableQuery,
           headers = localVariableHeaders
       )
       val response = request<RestEmailAddress>(
           localVariableConfig,
           localVariableBody
       )

       return when (response.responseType) {
           ResponseType.Success -> (response as Success<*>).data as RestEmailAddress
           ResponseType.Informational -> TODO()
           ResponseType.Redirection -> TODO()
           ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String
               ?: "Client error")
           ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message
               ?: "Server error")
           else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
       }
    }

}
